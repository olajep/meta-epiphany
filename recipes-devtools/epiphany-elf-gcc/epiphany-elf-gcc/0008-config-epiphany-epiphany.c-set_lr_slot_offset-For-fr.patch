From 4bc396b9fc2b763d2a67525d822abe8e39538157 Mon Sep 17 00:00:00 2001
From: Joern Rennecke <joern.rennecke@embecosm.com>
Date: Fri, 2 Aug 2013 04:35:42 +0100
Subject: [PATCH 08/33] * config/epiphany/epiphany.c (set_lr_slot_offset): For
 frame_offset_known case, fix assert and calculate appropriate lr_slot_offset.
 (epiphany_compute_frame_size): Avoid getting a split/unaligned trace.
 (epiphany_emit_save_restore): Don't worry about last_saved if reg_size is
 aligned.

---
 gcc/ChangeLog.epiphany         |  7 +++++++
 gcc/config/epiphany/epiphany.c | 31 +++++++++++++++++++++----------
 2 files changed, 28 insertions(+), 10 deletions(-)

diff --git a/gcc/ChangeLog.epiphany b/gcc/ChangeLog.epiphany
index f7f36b122d7..a34fa66c806 100644
--- a/gcc/ChangeLog.epiphany
+++ b/gcc/ChangeLog.epiphany
@@ -4,6 +4,13 @@
 	Move call to set_lr_slot_offset after the bulk of current_frame_info
 	member initializations.
 
+	* config/epiphany/epiphany.c (set_lr_slot_offset): For
+	frame_offset_known case, fix assert and calculate appropriate
+	lr_slot_offset.
+	(epiphany_compute_frame_size): Avoid getting a split/unaligned trace.
+	(epiphany_emit_save_restore): Don't worry about last_saved if
+	reg_size is aligned.
+
 2013-08-01  Joern Rennecke <joern.rennecke@embecosm.com>
 
 	* config/epiphany/epiphany.h (FIRST_PSEUDO_REGISTER): Bump up to 79.
diff --git a/gcc/config/epiphany/epiphany.c b/gcc/config/epiphany/epiphany.c
index 25a0d80520e..18fecaf8fb6 100644
--- a/gcc/config/epiphany/epiphany.c
+++ b/gcc/config/epiphany/epiphany.c
@@ -1077,12 +1077,14 @@ set_lr_slot_offset (long lr_slot_offset)
 	= (current_frame_info.first_slot_offset - current_frame_info.reg_size
 	   - lr_slot_offset);
       if (current_frame_info.frame_offset_known)
-	gcc_assert (current_frame_info.sft_hd_frame_offset
-		    = sft_hd_frame_offset);
+	gcc_assert ((current_frame_info.sft_hd_frame_offset
+		     == sft_hd_frame_offset)
+		    || reload_completed);
       else
 	current_frame_info.sft_hd_frame_offset = sft_hd_frame_offset;
       current_frame_info.frame_offset_known = true;
-      lr_slot_offset = 0;
+      lr_slot_offset
+	= current_frame_info.sft_hd_frame_offset - sft_hd_frame_offset;
     }
   lr_slot_offset += current_frame_info.last_slot_offset;
   if (MACHINE_FUNCTION (cfun)->lr_slot_known)
@@ -1221,10 +1223,13 @@ epiphany_compute_frame_size (int size /* # of var. bytes allocated.  */)
   /* If there might be variables with 64-bit alignment requirement, align the
      start of the variables.  */
   if (var_size >= 2 * UNITS_PER_WORD
+      /* Avoid getting a split/unaligned trace.  */
+      || (current_frame_info.need_trace && first_slot != GPR_LR)
       /* We don't want to split a double reg save/restore across two unpaired
 	 stack slots when optimizing.  This rounding could be avoided with
-	 more complex reordering of the register saves, but that would seem
-	 to be a lot of code complexity for little gain.  */
+	 more complex reordering of the register saves, if there is an
+	 unpaired save, but that would seem to be a lot of code complexity
+	 for little gain.  */
       || (reg_size > 8 && optimize))
     reg_size = EPIPHANY_STACK_ALIGN (reg_size);
   if (((total_size + reg_size
@@ -1737,12 +1742,18 @@ epiphany_emit_save_restore (int min, int limit, rtx addr, int epilogue_p)
   int stack_offset
     = current_frame_info.first_slot >= 0 ? epiphany_stack_offset : 0;
   rtx skipped_mem = NULL_RTX;
-  int last_saved = limit - 1;
+  int last_saved = FIRST_PSEUDO_REGISTER;
 
-  if (!optimize)
-    while (last_saved >= 0
-	   && !TEST_HARD_REG_BIT (current_frame_info.gmask, last_saved))
-      last_saved--;
+  /* If there's an odd word out, set up last_saved so we don't miss our
+     last chance to split a double-word save.  */
+  if (current_frame_info.reg_size > 2 * UNITS_PER_WORD
+      && (current_frame_info.reg_size & UNITS_PER_WORD))
+    {
+      last_saved = limit - 1;
+      while (last_saved >= 0
+	     && !TEST_HARD_REG_BIT (current_frame_info.gmask, last_saved))
+	last_saved--;
+    }
   for (i = 0; i < limit; i++)
     {
       machine_mode mode = word_mode;
-- 
2.31.1

